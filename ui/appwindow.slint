import { Button, VerticalBox , LineEdit} from "std-widgets.slint";

export component AppWindow inherits Window {
    in-out property <string> results: "";
    in-out property <bool> opencurtain;
    callback divide-income(string);
    background: #010925; 
    GridLayout{
        padding: 50px;
        spacing: 50px;
    Row{
        Text{
            text:"Income Divider";
            horizontal-alignment:center;
            font-size: 35px;
            font-weight: 700;
        }
    }
    Row{
        income:=LineEdit {
            horizontal-alignment: center;
            font-size:20px;
            placeholder-text: "Enter your Income";
            height: 50px;
        }
    }
    Row{
        Button {
            text: "Calculate";
            height: 50px;
            primary: true;
            clicked => {
                root.opencurtain=!root.opencurtain;
                divide-income(income.text)}
        }
    }
    Row{
        VerticalBox {
            Rectangle {
                height:100px;
                background: #c6c8cd;
                Text {
                    color:black;
                    font-size:16px ;
                    font-weight: 500;
                    text:root.results;
                }
                //left rectangle
                Rectangle {
                    x: 0;
                    background: #272323;
                    width: opencurtain ? 0 : parent.width/2;
                    height:parent.height;
                    animate width {
                         duration: 250ms;easing:ease-in;
                    }
                }

                //right rectangle
                Rectangle {
                    x: opencurtain ? parent.width : parent.width/2;
                    background: #272323;
                    width: opencurtain ? 0 : parent.width/2;
                    height:parent.height;
                    animate width {
                         duration: 250ms;easing:ease-in;
                    }
                    animate x {
                        duration: 250ms;easing:ease-in;
                   }
                }
            }
        }
    }
    }
}
